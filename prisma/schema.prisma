generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  facts         Fact[]
  votes         Vote[]
  apiTokens     ApiToken[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  slug      String   @unique
  status    String   @default("draft")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fact {
  id        Int      @id @default(autoincrement())
  claim     String
  answer    String
  slug      String   @unique
  status    String   @default("draft")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  votes     Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  factId    Int
  userId    Int
  rating    String   // "helpful", "somewhat_helpful", "not_helpful"
  createdAt DateTime @default(now())
  fact      Fact     @relation(fields: [factId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([factId, userId])
}

model ApiToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  name        String?  // Optional name/description for the token
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?
  isRevoked   Boolean  @default(false)
}
